import re
import logging
from typing import Dict, Any, List

class MalwareDetectorPlugin:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.malware_patterns = [
            r'cmd\.exe',
            r'powershell\.exe',
            r'wscript\.exe',
            r'cscript\.exe',
            r'rundll32\.exe',
            r'regsvr32\.exe',
            r'mshta\.exe',
            r'certutil\.exe',
            r'bitsadmin\.exe'
        ]
        self.suspicious_strings = [
            'base64',
            'powershell',
            'cmd',
            'regsvr32',
            'rundll32',
            'wscript',
            'cscript',
            'mshta',
            'certutil',
            'bitsadmin'
        ]
    
    def analyze(self, data: Dict[str, Any]) -> Dict[str, Any]:
        results = {
            'malware_indicators': [],
            'suspicious_processes': [],
            'suspicious_artifacts': [],
            'confidence_score': 0.0,
            'threat_level': 'low'
        }
        
        try:
            results['malware_indicators'] = self._detect_malware_indicators(data)
            results['suspicious_processes'] = self._analyze_processes(data.get('processes', []))
            results['suspicious_artifacts'] = self._analyze_artifacts(data.get('artifacts', []))
            results['confidence_score'] = self._calculate_confidence_score(results)
            results['threat_level'] = self._determine_threat_level(results['confidence_score'])
            
        except Exception as e:
            self.logger.error(f"Malware detection failed: {str(e)}")
            results['error'] = str(e)
        
        return results
    
    def _detect_malware_indicators(self, data: Dict[str, Any]) -> List[Dict]:
        indicators = []
        
        for process in data.get('processes', []):
            name = process.get('name', '').lower()
            command_line = process.get('command_line', '').lower()
            
            for pattern in self.malware_patterns:
                if re.search(pattern, name) or re.search(pattern, command_line):
                    indicators.append({
                        'type': 'suspicious_process',
                        'process_name': name,
                        'command_line': command_line,
                        'pattern_matched': pattern,
                        'confidence': 0.8
                    })
        
        return indicators
    
    def _analyze_processes(self, processes: List[Dict]) -> List[Dict]:
        suspicious_processes = []
        
        for process in processes:
            name = process.get('name', '').lower()
            command_line = process.get('command_line', '').lower()
            suspicious_score = 0.0
            
            for suspicious_string in self.suspicious_strings:
                if suspicious_string in name or suspicious_string in command_line:
                    suspicious_score += 0.2
            
            if suspicious_score > 0.5:
                suspicious_processes.append({
                    'pid': process.get('pid', 0),
                    'name': name,
                    'command_line': command_line,
                    'suspicious_score': suspicious_score,
                    'reasons': self._get_suspicious_reasons(name, command_line)
                })
        
        return suspicious_processes
    
    def _analyze_artifacts(self, artifacts: List[Dict]) -> List[Dict]:
        suspicious_artifacts = []
        
        for artifact in artifacts:
            description = artifact.get('description', '').lower()
            artifact_type = artifact.get('type', '').lower()
            
            if artifact_type == 'malfind' or 'injection' in description:
                suspicious_artifacts.append({
                    'type': artifact_type,
                    'description': description,
                    'confidence': artifact.get('confidence', 0.5),
                    'severity': artifact.get('severity', 'medium')
                })
        
        return suspicious_artifacts
    
    def _get_suspicious_reasons(self, name: str, command_line: str) -> List[str]:
        reasons = []
        
        if 'temp' in name or 'tmp' in name:
            reasons.append('Temporary location')
        
        if 'powershell' in command_line:
            reasons.append('PowerShell usage')
        
        if 'base64' in command_line:
            reasons.append('Base64 encoding')
        
        if 'cmd' in command_line:
            reasons.append('Command line usage')
        
        if len(command_line) > 200:
            reasons.append('Long command line')
        
        return reasons
    
    def _calculate_confidence_score(self, results: Dict[str, Any]) -> float:
        score = 0.0
        
        score += len(results['malware_indicators']) * 0.3
        score += len(results['suspicious_processes']) * 0.2
        score += len(results['suspicious_artifacts']) * 0.5
        
        return min(score, 1.0)
    
    def _determine_threat_level(self, confidence_score: float) -> str:
        if confidence_score >= 0.8:
            return 'high'
        elif confidence_score >= 0.5:
            return 'medium'
        else:
            return 'low'
